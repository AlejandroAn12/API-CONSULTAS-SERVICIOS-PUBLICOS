// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id           String   @id @default(uuid())
  nombres      String
  email        String   @unique
  password     String
  refreshToken String?
  estado       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  roleId String
  role   Rol    @relation(fields: [roleId], references: [id]) // Usuario pertenece a un Rol

  apiKeys ApiKey[]
  wallet  Wallet?
  // suscripciones Suscripcion[]

  Consumo Consumo[]
}

model Rol {
  id          String   @id @default(uuid())
  nombre      String
  descripcion String?
  estado      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  usuarios Usuario[]
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  system    String // nombre del sistema que consume tu API
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  expiresAt DateTime // fecha de expiración

  usuarioId String
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
}

model Wallet {
  id        String   @id @default(uuid())
  usuarioId String   @unique
  balance   Float    @default(0) // saldo actual en USD
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  usuario       Usuario       @relation(fields: [usuarioId], references: [id])
  transacciones Transaccion[]
}

model PaypalOrder {
  id          String    @id @default(cuid())
  orderId     String    @unique
  usuarioId   String
  amount      Float
  currency    String
  status      String // CREATED, APPROVED, COMPLETED, FAILED
  approvalUrl String
  captureId   String?
  error       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  capturedAt  DateTime?

  @@map("paypal_orders")
}

model Transaccion {
  id          String   @id @default(uuid())
  tipo        String // "RECARGA", "CONSUMO"
  monto       Float // Ej: 5.00 recarga, -0.40 consumo
  descripcion String?
  createdAt   DateTime @default(now())

  walletId String
  wallet   Wallet @relation(fields: [walletId], references: [id])
}

model EndpointPrecio {
  id        String   @id @default(uuid())
  endpoint  String // "/api/resource"
  method    String // "GET", "POST"
  costo     Float // Ej: 0.004 -> 0.4 ctvs
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Consumo Consumo[]
}

model Setting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Consumo {
  id            Int      @id @default(autoincrement())
  usuarioId     String
  endpointId    String
  costo         Float // Precio del endpoint
  saldoRestante Float // Saldo del usuario después de este consumo
  fecha         DateTime @default(now())

  usuario  Usuario        @relation(fields: [usuarioId], references: [id])
  endpoint EndpointPrecio @relation(fields: [endpointId], references: [id])
}

// model Plan {
//   id           String   @id @default(uuid())
//   nombre       String
//   descripcion  String?
//   precio       Float
//   duracionDias Int
//   estado       Boolean  @default(true)
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt

//   // Relación a los límites de peticiones permitidas
//   limites LimitePeticion[]

//   suscripciones Suscripcion[]
// }

// model Suscripcion {
//   id          String   @id @default(uuid())
//   usuarioId   String
//   planId      String
//   fechaInicio DateTime @default(now())
//   fechaFin    DateTime
//   activa      Boolean  @default(true)
//   timeZoneId  Int

//   usuario  Usuario  @relation(fields: [usuarioId], references: [id])
//   plan     Plan     @relation(fields: [planId], references: [id])
//   timezone Timezone @relation(fields: [timeZoneId], references: [id])

//   consumos ConsumoPeticion[]
// }

// model LimitePeticion {
//   id        Int      @id @default(autoincrement())
//   endpoint  String   // Ej: "/api/resource"
//   method    String   // Ej: "GET", "POST"
//   maximo    Int      // Límite que el plan permite
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   planId String
//   plan   Plan @relation(fields: [planId], references: [id])
// }

// model ConsumoPeticion {
//   id          Int      @id @default(autoincrement())
//   endpoint    String
//   method      String
//   usado       Int      @default(0) // Cuántas veces ya consumió
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   suscripcionId String
//   suscripcion   Suscripcion @relation(fields: [suscripcionId], references: [id])
// }

model Timezone {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Suscripcion Suscripcion[]
}
